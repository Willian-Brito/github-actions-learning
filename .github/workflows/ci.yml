name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  versioning:
    runs-on: ubuntu-latest
    name: Versioning

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0 
      
      - uses:  codacy/git-version@2.8.3
        id: version
        with:
          release-branch: main
          prefix: v

      - name: Repository Tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::notice:: ${{ steps.version.outputs.version }}"
          git config --global user.email "${{ github.actor }}"@users.noreply.github.com
          git config --global user.name "${{ github.actor }}"
          git tag -a "${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
          git push --tags
        if: github.ref == 'refs/heads/main'

  backend-build-and-test:
    needs: versioning
    runs-on: ubuntu-latest
    name: Backend Build and Test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          cache: true
          cache-dependency-path: ./src/**/packages.lock.json
      
      - name: Restore
        run: |
          dotnet restore ./src/Todo.Api.sln

      - name: Build
        run: |          
          dotnet build --no-restore --configuration Release ./src/Todo.Api.sln          
      
      - name: Test
        run: |                    
          dotnet test ./src/Todo.Api.sln --no-restore --no-build --configuration Release --logger trx --results-directory "TestResults"

      - uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: TestResults  

      - name: Publish
        run: dotnet publish ./src/Todo.Api.csproj --no-restore --no-build --configuration Release --output ./publish
        if: github.ref == 'refs/heads/main'

      - name: Upload API Artifacts        
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: ./publish
        if: github.ref == 'refs/heads/main'

  backend-lint:
    needs: versioning
    runs-on: ubuntu-latest
    name: Backend Lint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - uses: super-linter/super-linter@v8
        env:
          DEFAULT_BRANCH: "main"
          VALIDATE_ALL_CODEBASE: "false"
          VALIDATE_YAML: "true"
          VALIDATE_CSHARP: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  frontend-build-and-test:
    needs: versioning
    runs-on: ubuntu-latest
    name: Frontend Build and Test
    defaults:
      run:
        working-directory: ./src/web

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./src/web

      - name: Install dependencies        
        run: |
          npm ci
      
      - name: Test        
        run: |
          npm run lint

      - name: Build
        run: |
          npm run build
  
      - name: Upload Frontend Artifacts        
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: ./src/web/dist

  frontend-lint:
    needs: versioning
    runs-on: ubuntu-latest
    name: Frontend Lint
    defaults:
      run:
        working-directory: ./src/web

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ./src/web

      - name: Install dependencies        
        run: |
          npm ci
      
      - name: Lint        
        run: |
          npm run lint

  sca:
    needs: versioning
    runs-on: ubuntu-latest
    name: SCA - Software Composition Analysis
    steps:
        - name: Checkout Code
          uses: actions/checkout@v4
        
        - name: Setup Java (required for Dependency-Check)
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '17'

        - name: Run OWASP Dependencyâ€‘Check
          
          uses: dependency-check/Dependency-Check_Action@main
          id: depcheck
          with:
            project: '${{ github.repository }}'
            path: '.'
            format: 'HTML'
            out: 'dependency-reports'
            args: |              
              --scan ./src/api
          env:
            JAVA_HOME: /opt/jdk

        - name: Upload vulnerability report
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: dependency-check-report
            path: dependency-reports/
  
  sast:
    needs: versioning
    name: SAST - (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: csharp
            build-mode: none
          - language: javascript-typescript
            build-mode: none
    steps:
      - uses: actions/checkout@v4

      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
    if: github.ref != 'refs/heads/main'

  build-docker-image:
    needs: [versioning, backend-build-and-test, frontend-build-and-test]
    runs-on: ubuntu-latest
    name: Build Docker Image

    env:
      version: ${{needs.versioning.outputs.version}}

    steps:      
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: app
          merge-multiple: false

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ vars.DOCKERHUB_REPOSITORY }}/todo-app:${{ env.version }} .
      
      - name: Tag Docker Image as Latest
        run: |
          docker tag ${{ vars.DOCKERHUB_REPOSITORY }}/todo-app:${{ env.version }} ${{ vars.DOCKERHUB_REPOSITORY }}/todo-app:latest
        if: github.ref == 'refs/heads/main'

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Docker push
        run: docker push --all-tags ${{ vars.DOCKERHUB_REPOSITORY }}/todo-app